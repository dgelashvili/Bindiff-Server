// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: bin_diff.proto
// Protobuf C++ Version: 6.30.0

#ifndef bin_5fdiff_2eproto_2epb_2eh
#define bin_5fdiff_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6030000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_bin_5fdiff_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_bin_5fdiff_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_bin_5fdiff_2eproto;
}  // extern "C"
namespace bin_diff {
class DiffReply;
struct DiffReplyDefaultTypeInternal;
extern DiffReplyDefaultTypeInternal _DiffReply_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull DiffReply_class_data_;
class DiffRequest;
struct DiffRequestDefaultTypeInternal;
extern DiffRequestDefaultTypeInternal _DiffRequest_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull DiffRequest_class_data_;
class FunctionMatch;
struct FunctionMatchDefaultTypeInternal;
extern FunctionMatchDefaultTypeInternal _FunctionMatch_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull FunctionMatch_class_data_;
class GetReply;
struct GetReplyDefaultTypeInternal;
extern GetReplyDefaultTypeInternal _GetReply_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull GetReply_class_data_;
class GetRequest;
struct GetRequestDefaultTypeInternal;
extern GetRequestDefaultTypeInternal _GetRequest_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull GetRequest_class_data_;
class UploadReply;
struct UploadReplyDefaultTypeInternal;
extern UploadReplyDefaultTypeInternal _UploadReply_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull UploadReply_class_data_;
class UploadRequest;
struct UploadRequestDefaultTypeInternal;
extern UploadRequestDefaultTypeInternal _UploadRequest_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull UploadRequest_class_data_;
}  // namespace bin_diff
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace bin_diff {

// ===================================================================


// -------------------------------------------------------------------

class UploadRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:bin_diff.UploadRequest) */ {
 public:
  inline UploadRequest() : UploadRequest(nullptr) {}
  ~UploadRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UploadRequest* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UploadRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UploadRequest(::google::protobuf::internal::ConstantInitialized);

  inline UploadRequest(const UploadRequest& from) : UploadRequest(nullptr, from) {}
  inline UploadRequest(UploadRequest&& from) noexcept
      : UploadRequest(nullptr, std::move(from)) {}
  inline UploadRequest& operator=(const UploadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadRequest& operator=(UploadRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadRequest& default_instance() {
    return *reinterpret_cast<const UploadRequest*>(
        &_UploadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(UploadRequest& a, UploadRequest& b) { a.Swap(&b); }
  inline void Swap(UploadRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UploadRequest* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UploadRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UploadRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UploadRequest& from) { UploadRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UploadRequest* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "bin_diff.UploadRequest"; }

 protected:
  explicit UploadRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  UploadRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const UploadRequest& from);
  UploadRequest(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, UploadRequest&& from) noexcept
      : UploadRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kContentFieldNumber = 1,
  };
  // bytes content = 1;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_content();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_content();
  void set_allocated_content(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_content() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_content();

  public:
  // @@protoc_insertion_point(class_scope:bin_diff.UploadRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const UploadRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr content_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bin_5fdiff_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull UploadRequest_class_data_;
// -------------------------------------------------------------------

class UploadReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:bin_diff.UploadReply) */ {
 public:
  inline UploadReply() : UploadReply(nullptr) {}
  ~UploadReply() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UploadReply* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UploadReply));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UploadReply(::google::protobuf::internal::ConstantInitialized);

  inline UploadReply(const UploadReply& from) : UploadReply(nullptr, from) {}
  inline UploadReply(UploadReply&& from) noexcept
      : UploadReply(nullptr, std::move(from)) {}
  inline UploadReply& operator=(const UploadReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadReply& operator=(UploadReply&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadReply& default_instance() {
    return *reinterpret_cast<const UploadReply*>(
        &_UploadReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(UploadReply& a, UploadReply& b) { a.Swap(&b); }
  inline void Swap(UploadReply* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadReply* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UploadReply* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UploadReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UploadReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UploadReply& from) { UploadReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UploadReply* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "bin_diff.UploadReply"; }

 protected:
  explicit UploadReply(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  UploadReply(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const UploadReply& from);
  UploadReply(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, UploadReply&& from) noexcept
      : UploadReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_id();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_id();
  void set_allocated_id(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_id();

  public:
  // @@protoc_insertion_point(class_scope:bin_diff.UploadReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   0, 31,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const UploadReply& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bin_5fdiff_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull UploadReply_class_data_;
// -------------------------------------------------------------------

class GetRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:bin_diff.GetRequest) */ {
 public:
  inline GetRequest() : GetRequest(nullptr) {}
  ~GetRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetRequest* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetRequest(const GetRequest& from) : GetRequest(nullptr, from) {}
  inline GetRequest(GetRequest&& from) noexcept
      : GetRequest(nullptr, std::move(from)) {}
  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRequest& operator=(GetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRequest& default_instance() {
    return *reinterpret_cast<const GetRequest*>(
        &_GetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(GetRequest& a, GetRequest& b) { a.Swap(&b); }
  inline void Swap(GetRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRequest* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetRequest& from) { GetRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetRequest* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "bin_diff.GetRequest"; }

 protected:
  explicit GetRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  GetRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const GetRequest& from);
  GetRequest(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, GetRequest&& from) noexcept
      : GetRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_id();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_id();
  void set_allocated_id(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_id();

  public:
  // @@protoc_insertion_point(class_scope:bin_diff.GetRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   0, 30,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const GetRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bin_5fdiff_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull GetRequest_class_data_;
// -------------------------------------------------------------------

class GetReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:bin_diff.GetReply) */ {
 public:
  inline GetReply() : GetReply(nullptr) {}
  ~GetReply() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetReply* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetReply));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetReply(::google::protobuf::internal::ConstantInitialized);

  inline GetReply(const GetReply& from) : GetReply(nullptr, from) {}
  inline GetReply(GetReply&& from) noexcept
      : GetReply(nullptr, std::move(from)) {}
  inline GetReply& operator=(const GetReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetReply& operator=(GetReply&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetReply& default_instance() {
    return *reinterpret_cast<const GetReply*>(
        &_GetReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(GetReply& a, GetReply& b) { a.Swap(&b); }
  inline void Swap(GetReply* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetReply* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetReply* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetReply& from) { GetReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetReply* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "bin_diff.GetReply"; }

 protected:
  explicit GetReply(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  GetReply(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const GetReply& from);
  GetReply(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, GetReply&& from) noexcept
      : GetReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFunctionNamesFieldNumber = 1,
  };
  // repeated string function_names = 1;
  int function_names_size() const;
  private:
  int _internal_function_names_size() const;

  public:
  void clear_function_names() ;
  const std::string& function_names(int index) const;
  std::string* PROTOBUF_NONNULL mutable_function_names(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_function_names(int index, Arg_&& value, Args_... args);
  std::string* PROTOBUF_NONNULL add_function_names();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_function_names(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& function_names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* PROTOBUF_NONNULL mutable_function_names();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_function_names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* PROTOBUF_NONNULL _internal_mutable_function_names();

  public:
  // @@protoc_insertion_point(class_scope:bin_diff.GetReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   0, 40,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const GetReply& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> function_names_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bin_5fdiff_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull GetReply_class_data_;
// -------------------------------------------------------------------

class FunctionMatch final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:bin_diff.FunctionMatch) */ {
 public:
  inline FunctionMatch() : FunctionMatch(nullptr) {}
  ~FunctionMatch() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FunctionMatch* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FunctionMatch));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FunctionMatch(::google::protobuf::internal::ConstantInitialized);

  inline FunctionMatch(const FunctionMatch& from) : FunctionMatch(nullptr, from) {}
  inline FunctionMatch(FunctionMatch&& from) noexcept
      : FunctionMatch(nullptr, std::move(from)) {}
  inline FunctionMatch& operator=(const FunctionMatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionMatch& operator=(FunctionMatch&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FunctionMatch& default_instance() {
    return *reinterpret_cast<const FunctionMatch*>(
        &_FunctionMatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(FunctionMatch& a, FunctionMatch& b) { a.Swap(&b); }
  inline void Swap(FunctionMatch* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FunctionMatch* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FunctionMatch* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FunctionMatch>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FunctionMatch& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FunctionMatch& from) { FunctionMatch::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FunctionMatch* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "bin_diff.FunctionMatch"; }

 protected:
  explicit FunctionMatch(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  FunctionMatch(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const FunctionMatch& from);
  FunctionMatch(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, FunctionMatch&& from) noexcept
      : FunctionMatch(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNamePrimaryFieldNumber = 1,
    kNameSecondaryFieldNumber = 2,
    kSimilarityFieldNumber = 3,
    kConfidenceFieldNumber = 4,
  };
  // string name_primary = 1;
  void clear_name_primary() ;
  const std::string& name_primary() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name_primary(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_name_primary();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_name_primary();
  void set_allocated_name_primary(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_name_primary() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_name_primary(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_name_primary();

  public:
  // string name_secondary = 2;
  void clear_name_secondary() ;
  const std::string& name_secondary() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name_secondary(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_name_secondary();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_name_secondary();
  void set_allocated_name_secondary(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_name_secondary() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_name_secondary(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_name_secondary();

  public:
  // float similarity = 3;
  void clear_similarity() ;
  float similarity() const;
  void set_similarity(float value);

  private:
  float _internal_similarity() const;
  void _internal_set_similarity(float value);

  public:
  // float confidence = 4;
  void clear_confidence() ;
  float confidence() const;
  void set_confidence(float value);

  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);

  public:
  // @@protoc_insertion_point(class_scope:bin_diff.FunctionMatch)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4,
                                   0, 57,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const FunctionMatch& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_primary_;
    ::google::protobuf::internal::ArenaStringPtr name_secondary_;
    float similarity_;
    float confidence_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bin_5fdiff_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull FunctionMatch_class_data_;
// -------------------------------------------------------------------

class DiffRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:bin_diff.DiffRequest) */ {
 public:
  inline DiffRequest() : DiffRequest(nullptr) {}
  ~DiffRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DiffRequest* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DiffRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DiffRequest(::google::protobuf::internal::ConstantInitialized);

  inline DiffRequest(const DiffRequest& from) : DiffRequest(nullptr, from) {}
  inline DiffRequest(DiffRequest&& from) noexcept
      : DiffRequest(nullptr, std::move(from)) {}
  inline DiffRequest& operator=(const DiffRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiffRequest& operator=(DiffRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DiffRequest& default_instance() {
    return *reinterpret_cast<const DiffRequest*>(
        &_DiffRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(DiffRequest& a, DiffRequest& b) { a.Swap(&b); }
  inline void Swap(DiffRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiffRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DiffRequest* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DiffRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DiffRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DiffRequest& from) { DiffRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DiffRequest* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "bin_diff.DiffRequest"; }

 protected:
  explicit DiffRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  DiffRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const DiffRequest& from);
  DiffRequest(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, DiffRequest&& from) noexcept
      : DiffRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kId1FieldNumber = 1,
    kId2FieldNumber = 2,
  };
  // string id_1 = 1;
  void clear_id_1() ;
  const std::string& id_1() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id_1(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_id_1();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_id_1();
  void set_allocated_id_1(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_id_1() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_id_1(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_id_1();

  public:
  // string id_2 = 2;
  void clear_id_2() ;
  const std::string& id_2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id_2(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_id_2();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_id_2();
  void set_allocated_id_2(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_id_2() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_id_2(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_id_2();

  public:
  // @@protoc_insertion_point(class_scope:bin_diff.DiffRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 37,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const DiffRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr id_1_;
    ::google::protobuf::internal::ArenaStringPtr id_2_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bin_5fdiff_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull DiffRequest_class_data_;
// -------------------------------------------------------------------

class DiffReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:bin_diff.DiffReply) */ {
 public:
  inline DiffReply() : DiffReply(nullptr) {}
  ~DiffReply() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DiffReply* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DiffReply));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DiffReply(::google::protobuf::internal::ConstantInitialized);

  inline DiffReply(const DiffReply& from) : DiffReply(nullptr, from) {}
  inline DiffReply(DiffReply&& from) noexcept
      : DiffReply(nullptr, std::move(from)) {}
  inline DiffReply& operator=(const DiffReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiffReply& operator=(DiffReply&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DiffReply& default_instance() {
    return *reinterpret_cast<const DiffReply*>(
        &_DiffReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(DiffReply& a, DiffReply& b) { a.Swap(&b); }
  inline void Swap(DiffReply* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiffReply* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DiffReply* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DiffReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DiffReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DiffReply& from) { DiffReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DiffReply* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "bin_diff.DiffReply"; }

 protected:
  explicit DiffReply(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  DiffReply(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const DiffReply& from);
  DiffReply(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, DiffReply&& from) noexcept
      : DiffReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMatchesFieldNumber = 1,
  };
  // repeated .bin_diff.FunctionMatch matches = 1;
  int matches_size() const;
  private:
  int _internal_matches_size() const;

  public:
  void clear_matches() ;
  ::bin_diff::FunctionMatch* PROTOBUF_NONNULL mutable_matches(int index);
  ::google::protobuf::RepeatedPtrField<::bin_diff::FunctionMatch>* PROTOBUF_NONNULL mutable_matches();

  private:
  const ::google::protobuf::RepeatedPtrField<::bin_diff::FunctionMatch>& _internal_matches() const;
  ::google::protobuf::RepeatedPtrField<::bin_diff::FunctionMatch>* PROTOBUF_NONNULL _internal_mutable_matches();
  public:
  const ::bin_diff::FunctionMatch& matches(int index) const;
  ::bin_diff::FunctionMatch* PROTOBUF_NONNULL add_matches();
  const ::google::protobuf::RepeatedPtrField<::bin_diff::FunctionMatch>& matches() const;
  // @@protoc_insertion_point(class_scope:bin_diff.DiffReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const DiffReply& from_msg);
    ::google::protobuf::RepeatedPtrField< ::bin_diff::FunctionMatch > matches_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bin_5fdiff_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull DiffReply_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// UploadRequest

// bytes content = 1;
inline void UploadRequest::clear_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UploadRequest::content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:bin_diff.UploadRequest.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void UploadRequest::set_content(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.content_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:bin_diff.UploadRequest.content)
}
inline std::string* PROTOBUF_NONNULL UploadRequest::mutable_content()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:bin_diff.UploadRequest.content)
  return _s;
}
inline const std::string& UploadRequest::_internal_content() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.content_.Get();
}
inline void UploadRequest::_internal_set_content(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.content_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL UploadRequest::_internal_mutable_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.content_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE UploadRequest::release_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:bin_diff.UploadRequest.content)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.content_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.content_.Set("", GetArena());
  }
  return released;
}
inline void UploadRequest::set_allocated_content(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.content_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:bin_diff.UploadRequest.content)
}

// -------------------------------------------------------------------

// UploadReply

// string id = 1;
inline void UploadReply::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UploadReply::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:bin_diff.UploadReply.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void UploadReply::set_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:bin_diff.UploadReply.id)
}
inline std::string* PROTOBUF_NONNULL UploadReply::mutable_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:bin_diff.UploadReply.id)
  return _s;
}
inline const std::string& UploadReply::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void UploadReply::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL UploadReply::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE UploadReply::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:bin_diff.UploadReply.id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.id_.Set("", GetArena());
  }
  return released;
}
inline void UploadReply::set_allocated_id(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:bin_diff.UploadReply.id)
}

// -------------------------------------------------------------------

// DiffRequest

// string id_1 = 1;
inline void DiffRequest::clear_id_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_1_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DiffRequest::id_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:bin_diff.DiffRequest.id_1)
  return _internal_id_1();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void DiffRequest::set_id_1(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_1_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:bin_diff.DiffRequest.id_1)
}
inline std::string* PROTOBUF_NONNULL DiffRequest::mutable_id_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id_1();
  // @@protoc_insertion_point(field_mutable:bin_diff.DiffRequest.id_1)
  return _s;
}
inline const std::string& DiffRequest::_internal_id_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_1_.Get();
}
inline void DiffRequest::_internal_set_id_1(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_1_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL DiffRequest::_internal_mutable_id_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_1_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE DiffRequest::release_id_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:bin_diff.DiffRequest.id_1)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.id_1_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.id_1_.Set("", GetArena());
  }
  return released;
}
inline void DiffRequest::set_allocated_id_1(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_1_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_1_.IsDefault()) {
    _impl_.id_1_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:bin_diff.DiffRequest.id_1)
}

// string id_2 = 2;
inline void DiffRequest::clear_id_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DiffRequest::id_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:bin_diff.DiffRequest.id_2)
  return _internal_id_2();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void DiffRequest::set_id_2(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.id_2_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:bin_diff.DiffRequest.id_2)
}
inline std::string* PROTOBUF_NONNULL DiffRequest::mutable_id_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id_2();
  // @@protoc_insertion_point(field_mutable:bin_diff.DiffRequest.id_2)
  return _s;
}
inline const std::string& DiffRequest::_internal_id_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_2_.Get();
}
inline void DiffRequest::_internal_set_id_2(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.id_2_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL DiffRequest::_internal_mutable_id_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.id_2_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE DiffRequest::release_id_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:bin_diff.DiffRequest.id_2)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.id_2_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.id_2_.Set("", GetArena());
  }
  return released;
}
inline void DiffRequest::set_allocated_id_2(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.id_2_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_2_.IsDefault()) {
    _impl_.id_2_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:bin_diff.DiffRequest.id_2)
}

// -------------------------------------------------------------------

// FunctionMatch

// string name_primary = 1;
inline void FunctionMatch::clear_name_primary() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_primary_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FunctionMatch::name_primary() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:bin_diff.FunctionMatch.name_primary)
  return _internal_name_primary();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void FunctionMatch::set_name_primary(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_primary_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:bin_diff.FunctionMatch.name_primary)
}
inline std::string* PROTOBUF_NONNULL FunctionMatch::mutable_name_primary()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name_primary();
  // @@protoc_insertion_point(field_mutable:bin_diff.FunctionMatch.name_primary)
  return _s;
}
inline const std::string& FunctionMatch::_internal_name_primary() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_primary_.Get();
}
inline void FunctionMatch::_internal_set_name_primary(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_primary_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL FunctionMatch::_internal_mutable_name_primary() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_primary_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE FunctionMatch::release_name_primary() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:bin_diff.FunctionMatch.name_primary)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_primary_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.name_primary_.Set("", GetArena());
  }
  return released;
}
inline void FunctionMatch::set_allocated_name_primary(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_primary_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_primary_.IsDefault()) {
    _impl_.name_primary_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:bin_diff.FunctionMatch.name_primary)
}

// string name_secondary = 2;
inline void FunctionMatch::clear_name_secondary() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_secondary_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FunctionMatch::name_secondary() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:bin_diff.FunctionMatch.name_secondary)
  return _internal_name_secondary();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void FunctionMatch::set_name_secondary(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.name_secondary_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:bin_diff.FunctionMatch.name_secondary)
}
inline std::string* PROTOBUF_NONNULL FunctionMatch::mutable_name_secondary()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name_secondary();
  // @@protoc_insertion_point(field_mutable:bin_diff.FunctionMatch.name_secondary)
  return _s;
}
inline const std::string& FunctionMatch::_internal_name_secondary() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_secondary_.Get();
}
inline void FunctionMatch::_internal_set_name_secondary(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.name_secondary_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL FunctionMatch::_internal_mutable_name_secondary() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.name_secondary_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE FunctionMatch::release_name_secondary() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:bin_diff.FunctionMatch.name_secondary)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.name_secondary_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.name_secondary_.Set("", GetArena());
  }
  return released;
}
inline void FunctionMatch::set_allocated_name_secondary(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.name_secondary_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_secondary_.IsDefault()) {
    _impl_.name_secondary_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:bin_diff.FunctionMatch.name_secondary)
}

// float similarity = 3;
inline void FunctionMatch::clear_similarity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.similarity_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float FunctionMatch::similarity() const {
  // @@protoc_insertion_point(field_get:bin_diff.FunctionMatch.similarity)
  return _internal_similarity();
}
inline void FunctionMatch::set_similarity(float value) {
  _internal_set_similarity(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:bin_diff.FunctionMatch.similarity)
}
inline float FunctionMatch::_internal_similarity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.similarity_;
}
inline void FunctionMatch::_internal_set_similarity(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.similarity_ = value;
}

// float confidence = 4;
inline void FunctionMatch::clear_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.confidence_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float FunctionMatch::confidence() const {
  // @@protoc_insertion_point(field_get:bin_diff.FunctionMatch.confidence)
  return _internal_confidence();
}
inline void FunctionMatch::set_confidence(float value) {
  _internal_set_confidence(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:bin_diff.FunctionMatch.confidence)
}
inline float FunctionMatch::_internal_confidence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.confidence_;
}
inline void FunctionMatch::_internal_set_confidence(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.confidence_ = value;
}

// -------------------------------------------------------------------

// DiffReply

// repeated .bin_diff.FunctionMatch matches = 1;
inline int DiffReply::_internal_matches_size() const {
  return _internal_matches().size();
}
inline int DiffReply::matches_size() const {
  return _internal_matches_size();
}
inline void DiffReply::clear_matches() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.matches_.Clear();
}
inline ::bin_diff::FunctionMatch* PROTOBUF_NONNULL DiffReply::mutable_matches(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:bin_diff.DiffReply.matches)
  return _internal_mutable_matches()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::bin_diff::FunctionMatch>* PROTOBUF_NONNULL DiffReply::mutable_matches()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:bin_diff.DiffReply.matches)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_matches();
}
inline const ::bin_diff::FunctionMatch& DiffReply::matches(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:bin_diff.DiffReply.matches)
  return _internal_matches().Get(index);
}
inline ::bin_diff::FunctionMatch* PROTOBUF_NONNULL DiffReply::add_matches()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::bin_diff::FunctionMatch* _add = _internal_mutable_matches()->Add();
  // @@protoc_insertion_point(field_add:bin_diff.DiffReply.matches)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::bin_diff::FunctionMatch>& DiffReply::matches() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:bin_diff.DiffReply.matches)
  return _internal_matches();
}
inline const ::google::protobuf::RepeatedPtrField<::bin_diff::FunctionMatch>&
DiffReply::_internal_matches() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.matches_;
}
inline ::google::protobuf::RepeatedPtrField<::bin_diff::FunctionMatch>* PROTOBUF_NONNULL
DiffReply::_internal_mutable_matches() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.matches_;
}

// -------------------------------------------------------------------

// GetRequest

// string id = 1;
inline void GetRequest::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetRequest::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:bin_diff.GetRequest.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void GetRequest::set_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:bin_diff.GetRequest.id)
}
inline std::string* PROTOBUF_NONNULL GetRequest::mutable_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:bin_diff.GetRequest.id)
  return _s;
}
inline const std::string& GetRequest::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void GetRequest::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL GetRequest::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE GetRequest::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:bin_diff.GetRequest.id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.id_.Set("", GetArena());
  }
  return released;
}
inline void GetRequest::set_allocated_id(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:bin_diff.GetRequest.id)
}

// -------------------------------------------------------------------

// GetReply

// repeated string function_names = 1;
inline int GetReply::_internal_function_names_size() const {
  return _internal_function_names().size();
}
inline int GetReply::function_names_size() const {
  return _internal_function_names_size();
}
inline void GetReply::clear_function_names() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.function_names_.Clear();
}
inline std::string* PROTOBUF_NONNULL GetReply::add_function_names()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_function_names()->Add();
  // @@protoc_insertion_point(field_add_mutable:bin_diff.GetReply.function_names)
  return _s;
}
inline const std::string& GetReply::function_names(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:bin_diff.GetReply.function_names)
  return _internal_function_names().Get(index);
}
inline std::string* PROTOBUF_NONNULL GetReply::mutable_function_names(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:bin_diff.GetReply.function_names)
  return _internal_mutable_function_names()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void GetReply::set_function_names(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(*_internal_mutable_function_names()->Mutable(index), std::forward<Arg_>(value),
                        args... );
  // @@protoc_insertion_point(field_set:bin_diff.GetReply.function_names)
}
template <typename Arg_, typename... Args_>
inline void GetReply::add_function_names(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_function_names(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:bin_diff.GetReply.function_names)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>& GetReply::function_names() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:bin_diff.GetReply.function_names)
  return _internal_function_names();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* PROTOBUF_NONNULL
GetReply::mutable_function_names() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:bin_diff.GetReply.function_names)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_function_names();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GetReply::_internal_function_names() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.function_names_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>* PROTOBUF_NONNULL
GetReply::_internal_mutable_function_names() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.function_names_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace bin_diff


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // bin_5fdiff_2eproto_2epb_2eh
