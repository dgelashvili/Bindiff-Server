// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bin_diff.proto

#include "bin_diff.pb.h"
#include "bin_diff.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace bin_diff {

static const char* BinDiffServer_method_names[] = {
  "/bin_diff.BinDiffServer/Upload",
  "/bin_diff.BinDiffServer/Diff",
  "/bin_diff.BinDiffServer/Get",
};

std::unique_ptr< BinDiffServer::Stub> BinDiffServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< BinDiffServer::Stub> stub(new BinDiffServer::Stub(channel, options));
  return stub;
}

BinDiffServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Upload_(BinDiffServer_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Diff_(BinDiffServer_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Get_(BinDiffServer_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status BinDiffServer::Stub::Upload(::grpc::ClientContext* context, const ::bin_diff::UploadRequest& request, ::bin_diff::UploadReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bin_diff::UploadRequest, ::bin_diff::UploadReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Upload_, context, request, response);
}

void BinDiffServer::Stub::async::Upload(::grpc::ClientContext* context, const ::bin_diff::UploadRequest* request, ::bin_diff::UploadReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bin_diff::UploadRequest, ::bin_diff::UploadReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Upload_, context, request, response, std::move(f));
}

void BinDiffServer::Stub::async::Upload(::grpc::ClientContext* context, const ::bin_diff::UploadRequest* request, ::bin_diff::UploadReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Upload_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bin_diff::UploadReply>* BinDiffServer::Stub::PrepareAsyncUploadRaw(::grpc::ClientContext* context, const ::bin_diff::UploadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bin_diff::UploadReply, ::bin_diff::UploadRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Upload_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bin_diff::UploadReply>* BinDiffServer::Stub::AsyncUploadRaw(::grpc::ClientContext* context, const ::bin_diff::UploadRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUploadRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BinDiffServer::Stub::Diff(::grpc::ClientContext* context, const ::bin_diff::DiffRequest& request, ::bin_diff::DiffReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bin_diff::DiffRequest, ::bin_diff::DiffReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Diff_, context, request, response);
}

void BinDiffServer::Stub::async::Diff(::grpc::ClientContext* context, const ::bin_diff::DiffRequest* request, ::bin_diff::DiffReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bin_diff::DiffRequest, ::bin_diff::DiffReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Diff_, context, request, response, std::move(f));
}

void BinDiffServer::Stub::async::Diff(::grpc::ClientContext* context, const ::bin_diff::DiffRequest* request, ::bin_diff::DiffReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Diff_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bin_diff::DiffReply>* BinDiffServer::Stub::PrepareAsyncDiffRaw(::grpc::ClientContext* context, const ::bin_diff::DiffRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bin_diff::DiffReply, ::bin_diff::DiffRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Diff_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bin_diff::DiffReply>* BinDiffServer::Stub::AsyncDiffRaw(::grpc::ClientContext* context, const ::bin_diff::DiffRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDiffRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BinDiffServer::Stub::Get(::grpc::ClientContext* context, const ::bin_diff::GetRequest& request, ::bin_diff::GetReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bin_diff::GetRequest, ::bin_diff::GetReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Get_, context, request, response);
}

void BinDiffServer::Stub::async::Get(::grpc::ClientContext* context, const ::bin_diff::GetRequest* request, ::bin_diff::GetReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bin_diff::GetRequest, ::bin_diff::GetReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void BinDiffServer::Stub::async::Get(::grpc::ClientContext* context, const ::bin_diff::GetRequest* request, ::bin_diff::GetReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bin_diff::GetReply>* BinDiffServer::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::bin_diff::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bin_diff::GetReply, ::bin_diff::GetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Get_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bin_diff::GetReply>* BinDiffServer::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::bin_diff::GetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRaw(context, request, cq);
  result->StartCall();
  return result;
}

BinDiffServer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BinDiffServer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BinDiffServer::Service, ::bin_diff::UploadRequest, ::bin_diff::UploadReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BinDiffServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bin_diff::UploadRequest* req,
             ::bin_diff::UploadReply* resp) {
               return service->Upload(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BinDiffServer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BinDiffServer::Service, ::bin_diff::DiffRequest, ::bin_diff::DiffReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BinDiffServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bin_diff::DiffRequest* req,
             ::bin_diff::DiffReply* resp) {
               return service->Diff(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BinDiffServer_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BinDiffServer::Service, ::bin_diff::GetRequest, ::bin_diff::GetReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BinDiffServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bin_diff::GetRequest* req,
             ::bin_diff::GetReply* resp) {
               return service->Get(ctx, req, resp);
             }, this)));
}

BinDiffServer::Service::~Service() {
}

::grpc::Status BinDiffServer::Service::Upload(::grpc::ServerContext* context, const ::bin_diff::UploadRequest* request, ::bin_diff::UploadReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BinDiffServer::Service::Diff(::grpc::ServerContext* context, const ::bin_diff::DiffRequest* request, ::bin_diff::DiffReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BinDiffServer::Service::Get(::grpc::ServerContext* context, const ::bin_diff::GetRequest* request, ::bin_diff::GetReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace bin_diff

